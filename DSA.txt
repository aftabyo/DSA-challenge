1. binary search (o(n)

class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        int l=0;
        int r=nums.size()-1;
        while(l<=r)
        {
            int mid=l+(r-l)/2; //slicing the array in the between
                if(nums[mid]==target)
                    return mid; //returning the exact position if found
                else if(nums[mid]<target)
                    l=mid+1;  //looking for in the second half of the array if the target is greater than nums[mid]
                else
                    r=mid-1; //looking for in the first half of the array if the target is lower than nums[mid]
        }
    return -1; //returning -1 if the target doesnt exists in the array
    }
};

Recursively (O(nlogn)
class Solution {
public:
    int search(vector<int>& nums, int target,int l, int r) {
        while(l<=r)
        {
            int mid=l+(r-l)/2; //slicing the array in the between
                if(nums[mid]==target)
                    return mid; //returning the exact position if found
                else if(nums[mid]<target)
                    search(nums, int target,mid+1, r);  //looking for in the second half of the array if the target is greater than nums[mid]
                else
                    search(nums, int target,l, mid-1); //looking for in the first half of the array if the target is lower than nums[mid]
        }
    return -1; //returning -1 if the target doesnt exists in the array
    }
};


2. quick sort

class Solution {
public:
    int partition(vector<int> arr,int low, int high)
    {
        int pivot=arr[high];  //choose high element as pivot
        int i=low-1; //i as the low eleemnt

        for(int j=low,j<high;j++)
        {
            if(arr[j]<pivot)
            {
                i++;
                std::swap(arr[i],arr[j]); //if the elem is less than the pivot we increase the i value and swap it
            }

        }
        std::swap(arr[i+1],arr[high]); //return back to original pos by swapping with pivot
        return i+1
    }

    void quicksort(vector<int> arr,int low, int high)
    {
        if(low<high)
        {
            int pi=partition(arr,low,high);

            quicksort(arr,low,pi-1);
            quicksort(arr,pi-1,high);
        }
    }





    vector<int> sortArray(vector<int>& nums) {
        quicksort(vector<int> nums,0, nums.size()-1);
        return 0;
    }
};